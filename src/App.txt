import React, { Component } from 'react';
import gql from "graphql-tag";
import { graphql } from "react-apollo";
import Paper from "@material-ui/core/Paper";
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import Checkbox from '@material-ui/core/Checkbox';
import IconButton from '@material-ui/core/IconButton';
import DeleteIcon from '@material-ui/icons/Delete';
import compose from 'lodash.flowright'



const TodosQuery = gql`
{
  todos{
    id
    complete
    text
  }
}

`;

const updateMutation = gql`
mutation($id: ID!, $complete: Boolean!){
  updateTodo(id: $id, complete: $complete)
}
`;

const removeMutation = gql`
mutation($id:ID!){
  removeTodo(id: ID)
}
`;

class App extends Component {


  updateTodo = async todo => {
    //something
    await this.props.updateTodo({
      variables: {
        id: todo.id,
        complete: !todo.complete
      },

      update: store => {
        const data = store.readQuery({ query: TodosQuery });
        data.todos = data.todos.map(x => x.id === todo.id ? {
          ...todo,
          complete: !todo.complete,
        } : x);
        store.writeQuery({ query: TodosQuery, data });
      }

    });
  };

  removeTodo = async todo => {
    //something
    await this.props.removeTodo({
      variables: {
        id: todo.id
      },

      update: store => {
        const data = store.readQuery({ query: TodosQuery });
        data.todos = data.todos.filter(x => x.id !== todo.id)
        store.writeQuery({ query: TodosQuery, data });
      }

    });

  };

  render() {
    const { data: { loading, todos } } = this.props;
    if (loading)
      return null;
    return (
      <div style={{ display: "flex" }}>
        <div style={{ margin: "auto", width: 400 }}>
          <Paper elevation={1}>
            <List>
              {todos.map((todo) => (
                <ListItem
                  key={todo.id}
                  role={undefined}
                  dense
                  button
                  onClick={() => this.updateTodo(todo)}
                >
                  <ListItemIcon>
                    <Checkbox
                      edge="start"
                      checked={todo.complete}
                      tabIndex={-1}
                      disableRipple
                    />
                  </ListItemIcon>
                  <ListItemText primary={todo.text} />
                  <ListItemSecondaryAction>
                    <IconButton onClick={() => this.removeTodo(todo)}>
                      <DeleteIcon />
                    </IconButton>
                  </ListItemSecondaryAction>
                </ListItem>
              ))}
            </List>

          </Paper>
        </div>
      </div>
    );
  }
}








export default compose(
  graphql(removeMutation, { name: "removeTodo" }),
  graphql(updateMutation, { name: "updateTodo" }),
  graphql(TodosQuery))(App);
